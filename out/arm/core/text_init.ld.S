	*(.text.read_daif)
	*(.text.elf_flags_to_mattr)
	*(.text.alloc_ta_mem)
	*(.text.sn_config_initial_paging)
	*(.text.sn_config_final_paging)
	*(.text.sn_load_elf_segments)
	*(.text.sn_load_elf)
	*(.text.tee_ta_load)
	*(.text.copy_ehdr)
	*(.text.get_shdr_type)
	*(.text.copy_phdr)
	*(.text.elf_load_get_next_segment)
	*(.text.e32_process_rel)
	*(.text.e64_process_rel)
	*(.text.sn_elf_load_init)
	*(.text.sn_e64_load_ehdr)
	*(.text.sn_load_head)
	*(.text.sn_elf_load_head)
	*(.text.sn_elf_load_body)
	*(.text.sn_elf_load_final)
	*(.text.thread_foreign_intr_disabled)
	*(.text.spinlock_count_incr)
	*(.text.spinlock_count_decr)
	*(.text.have_spinlock)
	*(.text.dcache_cleaninv_range)
	*(.text.dcache_clean_range)
	*(.text.dcache_inv_range)
	*(.text.do_dcsw_op)
	*(.text.dcache_op_all)
	*(.text.icache_inv_all)
	*(.text.icache_inv_range)
	*(.text.thread_asm)
	*(.text.write_daif)
	*(.text.tee_ta_gprof_sample_pc)
	*(.text.tee_ta_update_session_utime_suspend)
	*(.text.tee_ta_update_session_utime_resume)
	*(.text.assert_have_no_spinlock)
	*(.text.cpu_spin_lock)
	*(.text.cpu_spin_unlock)
	*(.text.tee_pager_release_phys)
	*(.text.init_canaries)
	*(.text.thread_check_canaries)
	*(.text.lock_global)
	*(.text.unlock_global)
	*(.text.thread_get_exceptions)
	*(.text.thread_set_exceptions)
	*(.text.thread_mask_exceptions)
	*(.text.thread_unmask_exceptions)
	*(.text.thread_get_core_local)
	*(.text.thread_lazy_save_ns_vfp)
	*(.text.thread_lazy_restore_ns_vfp)
	*(.text.init_regs)
	*(.text.thread_init_boot_thread)
	*(.text.thread_clr_boot_thread)
	*(.text.thread_alloc_and_run)
	*(.text.copy_a0_to_a5)
	*(.text.is_from_user)
	*(.text.is_user_mode)
	*(.text.thread_resume_from_rpc)
	*(.text.thread_handle_fast_smc)
	*(.text.thread_handle_std_smc)
	*(.text.thread_get_tmp_sp)
	*(.text.thread_get_saved_thread_sp)
	*(.text.thread_stack_start)
	*(.text.thread_stack_size)
	*(.text.thread_state_free)
	*(.text.release_unused_kernel_stack)
	*(.text.thread_state_suspend)
	*(.text.set_tmp_stack)
	*(.text.set_abt_stack)
	*(.text.thread_init_stack)
	*(.text.thread_get_id_may_fail)
	*(.text.thread_get_id)
	*(.text.init_handlers)
	*(.text.init_thread_stacks)
	*(.text.thread_init_primary)
	*(.text.init_sec_mon)
	*(.text.thread_init_per_cpu)
	*(.text.thread_get_tsd)
	*(.text.thread_get_ctx_regs)
	*(.text.thread_kernel_save_vfp)
	*(.text.thread_kernel_restore_vfp)
	*(.text.thread_user_enable_vfp)
	*(.text.thread_user_save_vfp)
	*(.text.thread_disable_prealloc_rpc_cache)
	*(.text.thread_enable_prealloc_rpc_cache)
	*(.text.get_tee_core_pos)
	*(.text.get_tee_cpu)
	*(.text.read_contextidr_el1)
	*(.text.read_ttbr0_el1)
	*(.text.read_ttbr1_el1)
	*(.text.read_esr_el1)
	*(.text.read_far_el1)
	*(.text.is_user_ta_ctx)
	*(.text.to_user_ta_ctx)
	*(.text.tee_pager_handle_fault)
	*(.text.get_current_ta_exidx)
	*(.text.__print_stack_unwind_arm32)
	*(.text.__print_stack_unwind_arm64)
	*(.text.abort_type_to_str)
	*(.text.fault_to_str)
	*(.text.__print_abort_info)
	*(.text.__abort_print)
	*(.text.abort_print)
	*(.text.abort_print_error)
	*(.text.set_abort_info)
	*(.text.handle_user_ta_panic)
	*(.text.handle_user_ta_vfp)
	*(.text.abort_is_user_exception)
	*(.text.is_abort_in_abort_handler)
	*(.text.is_vfp_fault)
	*(.text.get_fault_type)
	*(.text.abort_handler)
	*(.text.isb)
	*(.text.read_cpacr_el1)
	*(.text.write_cpacr_el1)
	*(.text.read_fpcr)
	*(.text.write_fpcr)
	*(.text.read_fpsr)
	*(.text.write_fpsr)
	*(.text.vfp_is_enabled)
	*(.text.vfp_enable)
	*(.text.vfp_disable)
	*(.text.vfp_lazy_save_state_init)
	*(.text.vfp_lazy_save_state_final)
	*(.text.vfp_lazy_restore_state)
	*(.text.vfp_asm)
	*(.text.cpu_spin_trylock)
	*(.text.trace_ext_puts)
	*(.text.trace_ext_get_thread_id)
	*(.text.pm_do_nothing)
	*(.text.configure_console_from_dt)
	*(.text.main_secondary_init_gic)
	*(.text.init_vfp_nsec)
	*(.text.init_vfp_sec)
	*(.text.init_asan)
	*(.text.init_runtime)
	*(.text.init_fdt)
	*(.text.init_primary_helper)
	*(.text.init_secondary_helper)
	*(.text.generic_boot_init_primary)
	*(.text.generic_boot_cpu_on_handler)
	*(.text.boot)
	*(.text.cpu_on_handler)
	*(.text.expand_prel31)
	*(.text.find_index)
	*(.text.unwind_exec_read_byte)
	*(.text.unwind_exec_insn)
	*(.text.unwind_tab)
	*(.text.unwind_stack_arm32)
	*(.text.unwind_stack_arm64)
	*(.text.print_kernel_stack)
	*(.text.dummy.tee_svc_handler)
	*(.text.dummy.tee_entry_std)
	*(.text.dummy.init_teecore)
	*(.text.dummy.__thread_std_smc_entry)
	*(.text.proc_schedule)
	*(.text.get_cur_proc)
	*(.text.enqueue)
	*(.text.enqueue_head)
	*(.text.write_at_s1e1r)
	*(.text.read_sctlr_el1)
	*(.text.read_par_el1)
	*(.text.teecore_memtype_name)
	*(.text.core_mmu_va2idx)
	*(.text.core_mmu_idx2va)
	*(.text.core_mmu_get_block_offset)
	*(.text.core_mmu_is_dynamic_vaspace)
	*(.text.mobj_get_pa)
	*(.text.mobj_is_paged)
	*(.text.core_mmap_is_end_of_table)
	*(.text._pbuf_intersects)
	*(.text._pbuf_is_inside)
	*(.text.pa_is_in_map)
	*(.text.va_is_in_map)
	*(.text.pbuf_inside_map_area)
	*(.text.find_map_by_type)
	*(.text.find_map_by_type_and_pa)
	*(.text.find_map_by_va)
	*(.text.find_map_by_pa)
	*(.text.pbuf_is_special_mem)
	*(.text.get_discovered_nsec_ddr)
	*(.text.pbuf_is_nsec_ddr)
	*(.text.pbuf_is_sdp_mem)
	*(.text.verify_special_mem_areas)
	*(.text.add_phys_mem)
	*(.text.add_va_space)
	*(.text.core_mmu_type_to_attr)
	*(.text.map_is_tee_ram)
	*(.text.map_is_flat_mapped)
	*(.text.cmp_mmap_by_lower_va)
	*(.text.cmp_mmap_by_bigger_region_size)
	*(.text.dump_mmap_table)
	*(.text.init_mem_map)
	*(.text.core_init_mmu_map)
	*(.text.core_pbuf_is)
	*(.text.core_va2pa_helper)
	*(.text.map_pa2va)
	*(.text.core_mmu_get_mem_by_type)
	*(.text.cache_op_inner)
	*(.text.core_mmu_set_entry)
	*(.text.set_region)
	*(.text.set_pg_region)
	*(.text.core_mmu_unmap_pages)
	*(.text.arm_va2pa_helper)
	*(.text.check_pa_matches_va)
	*(.text.virt_to_phys)
	*(.text.check_va_matches_pa)
	*(.text.phys_to_virt_ta_vaspace)
	*(.text.phys_to_virt_tee_ram)
	*(.text.phys_to_virt)
	*(.text.phys_to_virt_io)
	*(.text.cpu_mmu_enabled)
	*(.text.sn_core_mmu_populate_user_map)
	*(.text.tee_mmu_user_va2pa_attr)
	*(.text.tee_mmu_user_va2pa_helper)
	*(.text.tee_mmu_user_pa2va_helper)
	*(.text.tee_mmu_get_ctx)
	*(.text.teecore_init_ta_ram)
	*(.text.sn_tee_mmu_map_stack)
	*(.text.sn_tee_mmu_map_clear)
	*(.text.sn_tee_mmu_set_ctx)
	*(.text.sn_tee_mmu_get_load_addr)
	*(.text.sn_tee_mmu_init)
	*(.text.sn_tee_mmu_map_add_segment)
	*(.text.dsb)
	*(.text.write_ttbr0_el1)
	*(.text.write_ttbr1_el1)
	*(.text.write_tcr_el1)
	*(.text.write_mair_el1)
	*(.text.mattr_to_desc)
	*(.text.mmap_desc)
	*(.text.mmap_region_attr)
	*(.text.init_xlation_table)
	*(.text.calc_physical_addr_size_bits)
	*(.text.core_init_mmu_tables)
	*(.text.core_mmu_place_tee_ram_at_top)
	*(.text.core_init_mmu_regs)
	*(.text.core_mmu_set_info_table)
	*(.text.core_mmu_find_table)
	*(.text.core_mmu_set_entry_primitive)
	*(.text.core_mmu_user_va_range_is_defined)
	*(.text.core_mmu_get_user_va_range)
	*(.text.core_mmu_user_mapping_is_active)
	*(.text.core_mmu_get_user_map)
	*(.text.core_mmu_set_user_map)
	*(.text.core_mmu_get_fault_type)
	*(.text.sn_core_mmu_create_user_map)
	*(.text.sn_core_mmu_get_user_pgdir)
	*(.text.cpu_spin_lock_xsave)
	*(.text.cpu_spin_unlock_xrestore)
	*(.text.tee_mm_init)
	*(.text.tee_mm_final)
	*(.text.tee_mm_add)
	*(.text.tee_mm_stats_allocated)
	*(.text.update_max_allocated)
	*(.text.tee_mm_alloc)
	*(.text.tee_mm_free)
	*(.text.tee_mm_is_empty)
	*(.text.tee_mm_get_smem)
	*(.text.pgt_init)
	*(.text.pop_from_free_list)
	*(.text.push_to_free_list)
	*(.text.sn_pgt_free_unlocked)
	*(.text.sn_pgt_alloc_unlocked)
	*(.text.sn_pgt_alloc)
	*(.text.mobj_get_va)
	*(.text.mobj_get_cattr)
	*(.text.mobj_matches)
	*(.text.mobj_free)
	*(.text.mobj_phys_get_va)
	*(.text.mobj_phys_get_pa)
	*(.text.mobj_phys_get_cattr)
	*(.text.mobj_phys_matches)
	*(.text.mobj_phys_free)
	*(.text.to_mobj_phys)
	*(.text.mobj_virt_get_va)
	*(.text.mobj_virt_assert_type)
	*(.text.mobj_mm_offs)
	*(.text.mobj_mm_get_va)
	*(.text.mobj_mm_get_pa)
	*(.text.mobj_mm_get_cattr)
	*(.text.mobj_mm_matches)
	*(.text.mobj_mm_free)
	*(.text.to_mobj_mm)
	*(.text.mobj_mm_alloc)
	*(.text.mobj_reg_shm_get_pa)
	*(.text.mobj_reg_shm_free)
	*(.text.mobj_reg_shm_get_cattr)
	*(.text.to_mobj_reg_shm)
	*(.text.mobj_mapped_shm_get_pa)
	*(.text.mobj_mapped_shm_get_va)
	*(.text.mobj_mapped_shm_free)
	*(.text.mobj_mapped_shm_get_cattr)
	*(.text.mobj_mapped_shm_matches)
	*(.text.to_mobj_mapped_shm)
	*(.text.mobj_shm_get_va)
	*(.text.mobj_shm_get_pa)
	*(.text.mobj_shm_matches)
	*(.text.mobj_shm_free)
	*(.text.to_mobj_shm)
	*(.text.core_mmu_is_shm_cached)
	*(.text.tee_entry_get_shm_config)
	*(.text.tee_entry_fastcall_l2cc_mutex)
	*(.text.tee_entry_exchange_capabilities)
	*(.text.tee_entry_disable_shm_cache)
	*(.text.tee_entry_enable_shm_cache)
	*(.text.tee_entry_boot_secondary)
	*(.text.tee_entry_fast)
	*(.text.tee_entry_generic_get_api_call_count)
	*(.text.tee_entry_get_api_call_count)
	*(.text.tee_entry_get_api_uuid)
	*(.text.tee_entry_get_api_revision)
	*(.text.tee_entry_get_os_uuid)
	*(.text.tee_entry_get_os_revision)
	*(.text.generic_boot_get_handlers)
	*(.text.main_init_gic)
	*(.text.main_fiq)
	*(.text.console_init)
	*(.text._assert_log)
	*(.text._assert_break)
	*(.text.console_putc)
	*(.text.console_flush)
	*(.text.register_serial_console)
	*(.text.tee_ta_get_current_session)
	*(.text.dump_state)
	*(.text.tee_ta_dump_current)
	*(.text.tee_ta_exec)
	*(.text.is_valid_conf_and_notnull_size)
	*(.text._core_is_buffer_inside)
	*(.text._core_is_buffer_intersect)
	*(.text.__do_panic)
	*(.text.itr_init)
	*(.text.find_handler)
	*(.text.itr_handle)
	*(.text.io_pa_or_va)
	*(.text.write32)
	*(.text.read32)
	*(.text.chip_to_base)
	*(.text.pl011_flush)
	*(.text.pl011_have_rx_data)
	*(.text.pl011_getchar)
	*(.text.pl011_putc)
	*(.text.pl011_init)
	*(.text.write8)
	*(.text.probe_max_it)
	*(.text.gic_init_base_addr)
	*(.text.gic_it_add)
	*(.text.gic_it_set_cpu_mask)
	*(.text.gic_it_set_prio)
	*(.text.gic_it_enable)
	*(.text.gic_it_disable)
	*(.text.gic_it_set_pending)
	*(.text.gic_it_raise_sgi)
	*(.text.gic_read_iar)
	*(.text.gic_write_eoir)
	*(.text.gic_it_handle)
	*(.text.gic_op_add)
	*(.text.gic_op_enable)
	*(.text.gic_op_disable)
	*(.text.gic_op_raise_pi)
	*(.text.gic_op_raise_sgi)
	*(.text.gic_op_set_affinity)
	*(.text.asan_tag_access)
	*(.text.asan_tag_heap_free)
	*(.text.malloc_lock)
	*(.text.malloc_unlock)
	*(.text.tag_asan_free)
	*(.text.tag_asan_alloced)
	*(.text.bget)
	*(.text.bgetz)
	*(.text.bgetr)
	*(.text.brel)
	*(.text.bpool)
	*(.text.raw_malloc_return_hook)
	*(.text.raw_malloc_validate_pools)
	*(.text.raw_malloc)
	*(.text.raw_free)
	*(.text.raw_calloc)
	*(.text.raw_realloc)
	*(.text.malloc)
	*(.text.free)
	*(.text.calloc)
	*(.text.realloc_unlocked)
	*(.text.malloc_add_pool)
	*(.text.swapfunc)
	*(.text.med3)
	*(.text.qsort)
	*(.text.memcpy)
	*(.text.memmove)
	*(.text.memset)
	*(.text.strlen)
	*(.text.snprintk)
	*(.text.vsnprintk)
	*(.text.__vsnprintf)
	*(.text.uuid2str)
	*(.text.kprintf)
	*(.text.trace_level_to_string)
	*(.text.trace_printf)
	*(.text.memchr)
